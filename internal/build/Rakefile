require_relative 'rakefile_support'
require_relative '../lib/tracking'

initialize_rakefile!
initialize_tracking_database!(SHOW_OVERVIEW_PERIODICALLY)


##### Source tarballs and build environment initialization #####

SOURCE_TASKS = ['source:passenger', 'source:nginx']

register_tracking_category(:preparation, 'Preparation')

namespace :source do
  DISTROS.each do |distro|
    if dynamic_module_supported?(distro)
      register_tracking_task(:preparation, "passenger:#{distro}")
      desc "Create Passenger orig tarball"
      task("passenger:#{distro}" => :nginx) do
        track_task(:preparation, "passenger:#{distro}") do |task|
          if FETCH_PASSENGER_TARBALL_FROM_CACHE && File.exist?("/cache/#{distro}_#{PASSENGER_TARBALL}")
            task.sh "cp /cache/#{distro}_#{PASSENGER_TARBALL} /work/#{PASSENGER_TARBALL}"
          else
            available_nginx_version = latest_nginx_available(distro)
            if File.exist?("/cache/nginx_#{available_nginx_version}.orig.tar.gz")
               task.sh "cp /cache/nginx_#{available_nginx_version}.orig.tar.gz /work/"
             else
               task.sh "./download-nginx-orig-tarball.sh #{available_nginx_version} /work/nginx_#{available_nginx_version}.orig.tar.gz"
               task.sh "cp /work/nginx_#{available_nginx_version}.orig.tar.gz /cache/"
             end
            task.sh "./build-passenger-orig-tarball.sh /work/#{PASSENGER_TARBALL} #{available_nginx_version}"
            task.sh "cp /work/#{PASSENGER_TARBALL} /cache/#{distro}_#{PASSENGER_TARBALL}"
          end
        end
      end
    else
      register_tracking_task(:preparation, "passenger:#{distro}")
      desc "Create Passenger orig tarball"
      task("passenger:#{distro}" => :nginx) do
        track_task(:preparation, "passenger:#{distro}") do |task|
          if FETCH_PASSENGER_TARBALL_FROM_CACHE && File.exist?("/cache/#{PASSENGER_TARBALL}")
            task.sh "cp /cache/#{PASSENGER_TARBALL} /work/#{PASSENGER_TARBALL}"
          else
            task.sh "./build-passenger-orig-tarball.sh /work/#{PASSENGER_TARBALL} #{NGINX_VERSION}"
            task.sh "cp /work/#{PASSENGER_TARBALL} /cache/#{PASSENGER_TARBALL}"
          end
        end
      end
    end
  end

  register_tracking_task(:preparation, 'nginx')
  desc "Create Nginx orig tarball"
  task :nginx do
    track_task(:preparation, 'nginx') do |task|
      if File.exist?("/cache/#{NGINX_TARBALL}")
        task.sh "cp /cache/#{NGINX_TARBALL} /work/#{NGINX_TARBALL}"
      else
        task.sh "./download-nginx-orig-tarball.sh #{NGINX_VERSION} /work/#{NGINX_TARBALL}"
        task.sh "cp /work/#{NGINX_TARBALL} /cache/#{NGINX_TARBALL}"
      end
      # This second Nginx is specifically for when we're stuck at a lower version (e.g. due to distro module
      # list containing modules that are incompatible with the above Nginx version).
      if File.exist?("/cache/#{PACKAGING_NGINX_TARBALL}")
        task.sh "cp /cache/#{PACKAGING_NGINX_TARBALL} /work/#{PACKAGING_NGINX_TARBALL}"
      else
        task.sh "./download-nginx-orig-tarball.sh #{PACKAGING_NGINX_VERSION} /work/#{PACKAGING_NGINX_TARBALL}"
        task.sh "cp /work/#{PACKAGING_NGINX_TARBALL} /cache/#{PACKAGING_NGINX_TARBALL}"
      end
    end
  end
end


##### Source packages #####

register_tracking_category(:spkg, 'Building source packages')

namespace :spkg do
  desc "Build all source packages for all distributions"


  ### Passenger ###

  desc "Build Passenger source packages for all distributions"
  task "passenger:all"

  DISTROS.each do |distro|
    task "passenger:all" => "passenger:#{distro}"
    task "all" => "passenger:#{distro}"

    register_tracking_task(:spkg, "passenger:#{distro}")
    desc "Build Passenger source package for #{distro}"
    task("passenger:#{distro}" => ["source:passenger:#{distro}"]) do
      track_task(:spkg, "passenger:#{distro}") do |task|
        task.sh "mkdir -p /work/spkg/passenger"
        task.sh "mkdir /work/spkg/passenger/#{distro}"
        task.sh "./build-source-package.rb",
                :SPECDIR      => "/system/debian_specs/#{PASSENGER_SPECDIR}",
                :DISTRIBUTION => distro,
                :TARBALL      => "#{PASSENGER_TARBALL}",
                :SOURCENAME   => "#{PASSENGER_PACKAGE_NAME}-#{PASSENGER_VERSION}",
                :SPKG_DIR     => "/work/spkg/passenger/#{distro}",
                :PACKAGE_VERSION  => PASSENGER_VERSION,
                :DEBIAN_NAME      => PASSENGER_DEBIAN_NAME,
                :DEBIAN_EPOCH     => PASSENGER_DEBIAN_EPOCH,
                :DEBIAN_VENDOR_VERSION => PASSENGER_DEBIAN_VENDOR_VERSION,
                :DEBIAN_HOTFIX_VERSION => PASSENGER_DEBIAN_HOTFIX_VERSION
      end
    end
  end


  ### Nginx ###

  desc "Build Nginx source packages for all distributions"
  task "nginx:all"

  DISTROS.each do |distro|
    next if dynamic_module_supported?(distro)
    task "nginx:all" => "nginx:#{distro}"
    task "all" => "nginx:#{distro}"

    register_tracking_task(:spkg, "nginx:#{distro}")
    desc "Build Nginx source package for #{distro}"
    task("nginx:#{distro}" => ["source:passenger:#{distro}", "source:nginx"]) do
      track_task(:spkg, "nginx:#{distro}") do |task|
        task.sh "mkdir -p /work/spkg/nginx"
        task.sh "mkdir /work/spkg/nginx/#{distro}"
        task.sh "./build-source-package.rb",
                :SPECDIR      => "/system/debian_specs/nginx",
                :DISTRIBUTION => distro,
                :TARBALL      => PACKAGING_NGINX_TARBALL,
                :SOURCENAME   => "#{NGINX_PACKAGE_NAME}-#{PACKAGING_NGINX_VERSION}",
                :SPKG_DIR     => "/work/spkg/nginx/#{distro}",
                :PACKAGE_VERSION  => PACKAGING_NGINX_VERSION,
                :DEBIAN_NAME      => NGINX_DEBIAN_NAME,
                :DEBIAN_EPOCH     => NGINX_DEBIAN_EPOCH,
                :DEBIAN_VENDOR_VERSION => NGINX_DEBIAN_VENDOR_VERSION,
                :DEBIAN_HOTFIX_VERSION => NGINX_DEBIAN_HOTFIX_VERSION
      end
    end
  end
end


##### Binary packages #####

register_tracking_category(:pkg, 'Building binary packages')

namespace :env do
  desc "Initialize environments for all distributions and architectures"
  task :all

  register_tracking_task(:pkg, "env:essentials")
  task :essentials do
    track_task(:pkg, "env:essentials") do |task|
      task.sh "./setup-environment-essentials.sh"
    end
  end

  DISTROS.each do |distro|
    ARCHITECTURES.each do |arch|
      task :all => "#{distro}:#{arch}"

      register_tracking_task(:pkg, "env:#{distro}:#{arch}")
      desc "Initialize environment for #{distro} #{arch}"
      task "#{distro}:#{arch}" => :essentials do
        track_task(:pkg, "env:#{distro}:#{arch}") do |task|
          task.sh "./setup-environment.sh #{distro} #{arch}"
        end
      end
    end
  end
end

namespace :pkg do
  desc "Build all binary packages for all distributions and architectures"
  task :all


  ### Passenger ###

  desc "Build Passenger binary packages for all distributions and architectures"
  task "passenger:all"

  DISTROS.each do |distro|
    ARCHITECTURES.each do |arch|
      task "passenger:all" => "passenger:#{distro}:#{arch}"
      task "all" => "passenger:#{distro}:#{arch}"

      register_tracking_task(:pkg, "passenger:#{distro}:#{arch}")
      desc "Build Passenger binary package for #{distro} #{arch}"
      task("passenger:#{distro}:#{arch}" => ["spkg:passenger:#{distro}", "env:#{distro}:#{arch}"]) do
        track_task(:pkg, "passenger:#{distro}:#{arch}") do |task|
          task.sh "cd /work/spkg/passenger/#{distro} && yes | pbuilder-dist #{distro} #{arch} *.dsc"
        end
      end
    end
  end


  ### Nginx ###

  desc "Build Nginx binary packages for all distributions and architectures"
  task "nginx:all"

  DISTROS.each do |distro|
    ARCHITECTURES.each do |arch|
      # Nginx dynamic module is built in pkg:passenger for use with distro standard Nginx, so
      # no need for our own separate Nginx package.
      next if dynamic_module_supported?(distro)

      task "nginx:all" => "nginx:#{distro}:#{arch}"
      task "all" => "nginx:#{distro}:#{arch}"

      register_tracking_task(:pkg, "nginx:#{distro}:#{arch}")
      desc "Build Nginx binary package for #{distro} #{arch}"
      task("nginx:#{distro}:#{arch}" => ["spkg:nginx:#{distro}", "env:#{distro}:#{arch}"]) do
        track_task(:pkg, "nginx:#{distro}:#{arch}") do |task|
          task.sh "cd /work/spkg/nginx/#{distro} && yes | pbuilder-dist #{distro} #{arch} *.dsc"
        end
      end
    end
  end
end


##### Misc #####

task :clear_work_dir do
  sh "rm -rf /work/*"
end

task :start do
  initialize_tracking_database_logs!
end

task :finish do
  puts
  puts "Finished"
  TRACKING_DB.monitor.synchronize do
    TRACKING_DB.set_finished!
    dump_tracking_database
  end

  puts
  puts "Committing build products to output directory..."
  sh "rm -rf /output/*"

  files = Dir["/work/spkg/*/*/*.{gz,xz,dsc}"]
  if files.any?
    puts "Placing #{files.size} files from /work/spkg into output directory"
    files.each do |path|
      basename = File.basename(path)
      distro = File.basename(File.dirname(path))
      mkdir_p "/output/#{distro}"
      cp path, "/output/#{distro}/#{basename}"
    end
  end

  files = Dir["/work/pkg/*/*.{deb,dsc,gz,xz}"]
  if files.any?
    puts "Placing #{files.size} files from /work/pkg into output directory"
    files.each do |path|
      basename = File.basename(path)
      distro = File.basename(File.dirname(path)).sub(/[-_].*/, '')
      mkdir_p "/output/#{distro}"
      cp path, "/output/#{distro}/#{basename}"
    end
  end
end
