<%
require File.dirname(File.absolute_path(__FILE__)) + '/helpers'
all_ruby_versions_to_try = distro_ruby_versions.reverse +
  ['4.10', '4.9',
   '4.8', '4.7', '4.6', '4.5', '4.4',
   '4.3', '4.2', '4.1', '4.0', '3.10',
   '3.9', '3.8', '3.7', '3.6', '3.5',
   '3.4', '3.3', '3.2', '3.1', '3.0',
   '2.7', '2.6', '2.5', '2.4', '2.3',
   '2.2', '2.1', '2.0', '1.9.1', '1.8']
all_ruby_versions_to_try.uniq!
-%>
/*
 * This is a simple program for executing either one of the Ruby versions installable
 * by APT. This is necessary because Debian 6 and Debian 8 (among others) do not install
 * /usr/bin/ruby upon installing one of the versioned Ruby packages (e.g. apt-get
 * install ruby2.1). Commands such as 'passenger-status' are supposed to be run under
 * the system Ruby interpreter, but we can't just set the shebang line to
 * '#!/usr/bin/ruby'. This problem is solved by setting the shebang line to
 * '#!/usr/bin/passenger_system_ruby'.
 *
 * Unlike passenger_free_ruby, passenger_system_ruby doesn't use the 'ruby'
 * in PATH. This is because tools like 'passenger-status' behave the same
 * no matter which Ruby version is used (e.g. they don't depend on
 * user-installed gems or user-provided code), so there is no reason to
 * allow them to be run under arbitrary Ruby interpters. We run a well-known
 * Ruby version in order to reduce risk: the arbitrary user-installed version
 * might be broken.
 */

#define PROGRAM_NAME "passenger_system_ruby"
#include "passenger_ruby_utils.c"

static void
try_unset(const char* s){
	if (0 != unsetenv(s)) {
		int e = errno;
		fprintf(stderr, PROGRAM_NAME ": cannot unset '%s': %s\n",s, strerror(e));
		exit(1);
	}
}

static void
reset_env() {
	try_unset("GEM_HOME");
	try_unset("GEM_PATH");
	try_unset("RUBYOPT");
	try_unset("RUBYPATH");
	try_unset("RUBYLIB");
}

int
main(int argc, const char *argv[]) {
	reset_env();
	<% for ruby_version in all_ruby_versions_to_try.reverse -%>
		try_exec("/usr/bin/ruby<%= ruby_version %>", argc, argv);
	<% end -%>

	fprintf(stderr, "passenger_system_ruby: cannot find suitable Ruby interpreter\n");
	return 1;
}
